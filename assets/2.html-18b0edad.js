import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o,c as r,a as i,b as a,d as s,f as c}from"./app-1d33235d.js";const p="/assets/wpf/eventDriven.png",g="/assets/wpf/frameBinding.png",d="/assets/wpf/frameproperly.png",f="/assets/wpf/frameproperly1.png",_="/assets/wpf/buttonClick.png",m="/assets/wpf/triggerFunc.png",e="/assets/wpf/viewModel.png",u="/assets/wpf/Command.png",h="/assets/wpf/frameBindingCommand.png",b="/assets/wpf/Changed.png",w={},x=i("h1",{id:"wpf-事件驱动-简单绑定",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#wpf-事件驱动-简单绑定","aria-hidden":"true"},"#"),a(" WPF 事件驱动,简单绑定")],-1),y={href:"https://www.bilibili.com/video/BV1nY411a7T8?p=6&vd_source=5150c9e6d7cfe2c4040a21750bdbc79b",target:"_blank",rel:"noopener noreferrer"},z=c('<h2 id="_1-事件驱动" tabindex="-1"><a class="header-anchor" href="#_1-事件驱动" aria-hidden="true">#</a> 1. 事件驱动</h2><ul><li>此例子主要展示事件驱动方式</li><li><img src="'+p+'" alt="事件驱动" tabindex="0" loading="lazy"><figcaption>事件驱动</figcaption></li></ul><h2 id="_2-控件绑定" tabindex="-1"><a class="header-anchor" href="#_2-控件绑定" aria-hidden="true">#</a> 2. 控件绑定</h2><ul><li>单纯实现控件数据绑定, (可单/双向)</li><li>与业务代码分离(不必要关联)</li><li>可以通过 Mode 修改绑定模式</li><li><img src="'+g+'" alt="控件" tabindex="0" loading="lazy"><figcaption>控件</figcaption></li></ul><h2 id="_3-控件与属性绑定" tabindex="-1"><a class="header-anchor" href="#_3-控件与属性绑定" aria-hidden="true">#</a> 3. 控件与属性绑定</h2><ul><li><p>简单实现控件绑定属性 (仅初始化时数据同步,同步数据需要其他方式绑定)</p></li><li><p>控件</p></li><li><figure><img src="'+d+'" alt="控件" tabindex="0" loading="lazy"><figcaption>控件</figcaption></figure></li><li><p>属性</p></li><li><figure><img src="'+f+'" alt="属性" tabindex="0" loading="lazy"><figcaption>属性</figcaption></figure></li></ul><h2 id="_4-命令" tabindex="-1"><a class="header-anchor" href="#_4-命令" aria-hidden="true">#</a> 4. 命令</h2><ul><li><figure><img src="'+_+'" alt="按钮控件" tabindex="0" loading="lazy"><figcaption>按钮控件</figcaption></figure></li><li><figure><img src="'+m+'" alt="触发函数" tabindex="0" loading="lazy"><figcaption>触发函数</figcaption></figure></li><li><p>缺点: 绑定事件一但发生变化,需要重新再按钮控件绑定</p></li><li><p>下面通过 命令方式进行解耦</p></li><li><figure><img src="'+e+'" alt="viewModel" tabindex="0" loading="lazy"><figcaption>viewModel</figcaption></figure></li><li><figure><img src="'+u+'" alt="定义命令类" tabindex="0" loading="lazy"><figcaption>定义命令类</figcaption></figure></li><li><figure><img src="'+h+'" alt="按钮绑定命令" tabindex="0" loading="lazy"><figcaption>按钮绑定命令</figcaption></figure></li><li><figure><img src="'+e+'" alt="控件绑定 VIewModel, VIewModel绑定 业务代码" tabindex="0" loading="lazy"><figcaption>控件绑定 VIewModel, VIewModel绑定 业务代码</figcaption></figure></li><li><p>通过以上方式实现简单的 View &amp; VIewModel &amp; Mode 形式, 但这个并不完全(只执行委托 不进行传参及数据绑定/驱动)</p></li><li><figure><img src="'+b+'" alt="此方式解决通知问题" tabindex="0" loading="lazy"><figcaption>此方式解决通知问题</figcaption></figure></li></ul>',8);function V(v,M){const l=n("ExternalLinkIcon");return o(),r("div",null,[x,i("ul",null,[i("li",null,[i("strong",null,[a("此笔记摘抄自 "),i("a",y,[a("痕迹 前辈的视频教程 from BiliBili"),s(l)])])])]),z])}const k=t(w,[["render",V],["__file","2.html.vue"]]);export{k as default};
